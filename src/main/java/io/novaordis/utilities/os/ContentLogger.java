/*
 * Copyright (c) 2016 Nova Ordis LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.novaordis.utilities.os;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Timer;
import java.util.TimerTask;

/**
 * A class that periodically logs content provided to it via the log() method. It is necessary to asynchronously
 * display fragments of stdout or stderr content generated by an underlying process. Useful when the process
 * is blocked in reading from stdin but it displays a question at stdout (or stderr) before that. It helps detecting
 * that situation.
 *
 * @author Ovidiu Feodorov <ovidiu@novaordis.com>
 * @since 12/19/16
 */
public class ContentLogger extends TimerTask {

    // Constants -------------------------------------------------------------------------------------------------------

    public static final int DEFAULT_INITIAL_BUFFER_SIZE = 1024;

    public static final long POLLING_INTERVAL_MS = 1000L;

    // Static ----------------------------------------------------------------------------------------------------------

    // Attributes ------------------------------------------------------------------------------------------------------

    private String name;
    private Logger log;
    private char[] buffer;

    // the position in the buffer where the next character goes
    private int next;

    // Constructors ----------------------------------------------------------------------------------------------------

    public ContentLogger(String name) {

        this(name, DEFAULT_INITIAL_BUFFER_SIZE);
    }

    public ContentLogger(String name, int initialBufferSize) {

        setLog(LoggerFactory.getLogger(ContentLogger.class));

        this.name = name;
        buffer = new char[initialBufferSize];
        next = 0;

        //
        // register a timer that will flush the buffer periodically
        //

        Timer loggingTimer = new Timer(name);
        loggingTimer.scheduleAtFixedRate(this, POLLING_INTERVAL_MS, POLLING_INTERVAL_MS);
    }

    // TimerTask implementation ----------------------------------------------------------------------------------------

    @Override
    public void run() {

        logContentAccumulatedSoFar();
    }

    // Public ----------------------------------------------------------------------------------------------------------

    public Logger getLog() {

        return log;
    }

    public void log(byte b[], int off, int len) {

        for(int i = off; i < off + len; i ++) {

            log((char)b[i]);
        }
    }

    public void log(char c) {

        synchronized (this) {

            if (next == buffer.length) {

                //
                // extend the buffer
                //
                char[] old = buffer;
                buffer = new char[buffer.length * 2];
                System.arraycopy(old, 0, buffer, 0, old.length);
            }

            buffer[next ++] = c;
        }
    }

    public String getName() {

        return name;
    }

    // Package protected -----------------------------------------------------------------------------------------------

    void logContentAccumulatedSoFar() {

        String fragment = "";

        synchronized (this) {

            //
            // display all accumulated lines, except the last one, unless that is the only one
            //

            if (next == 0) {

                return;
            }

            int i = next - 1;

            for(; i >= 0; i --) {

                if (buffer[i] == '\n') {

                    fragment = new String(buffer, 0, i);
                    System.arraycopy(buffer, i + 1, buffer, 0, next - i - 1);
                    next -= (i + 1);
                    break;
                }
            }

            if (i == -1) {

                //
                // no new line found, log the entire buffer
                //

                fragment = new String(buffer, 0, next);
                next = 0;
            }
        }

        log.debug(fragment);
    }

    /**
     * Useful for testing.
     */
    void setLog(Logger log) {

        this.log = log;
    }

    int getBufferSize() {

        synchronized (this) {
            return buffer.length;
        }
    }

    // Protected -------------------------------------------------------------------------------------------------------

    // Private ---------------------------------------------------------------------------------------------------------

    // Inner classes ---------------------------------------------------------------------------------------------------

}
